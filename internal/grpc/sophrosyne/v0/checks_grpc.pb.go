// Sophrosyne
//   Copyright (C) 2024  Mads R. Havmand
//
// This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU Affero General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU Affero General Public License for more details.
//
//   You should have received a copy of the GNU Affero General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: sophrosyne/v0/checks.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckService_GetCheck_FullMethodName    = "/sophrosyne.v0.CheckService/GetCheck"
	CheckService_GetChecks_FullMethodName   = "/sophrosyne.v0.CheckService/GetChecks"
	CheckService_CreateCheck_FullMethodName = "/sophrosyne.v0.CheckService/CreateCheck"
	CheckService_UpdateCheck_FullMethodName = "/sophrosyne.v0.CheckService/UpdateCheck"
	CheckService_DeleteCheck_FullMethodName = "/sophrosyne.v0.CheckService/DeleteCheck"
)

// CheckServiceClient is the client API for CheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckServiceClient interface {
	GetCheck(ctx context.Context, in *GetCheckRequest, opts ...grpc.CallOption) (*GetCheckResponse, error)
	GetChecks(ctx context.Context, in *GetChecksRequest, opts ...grpc.CallOption) (*GetChecksResponse, error)
	CreateCheck(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*CreateCheckResponse, error)
	UpdateCheck(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*UpdateCheckResponse, error)
	DeleteCheck(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type checkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckServiceClient(cc grpc.ClientConnInterface) CheckServiceClient {
	return &checkServiceClient{cc}
}

func (c *checkServiceClient) GetCheck(ctx context.Context, in *GetCheckRequest, opts ...grpc.CallOption) (*GetCheckResponse, error) {
	out := new(GetCheckResponse)
	err := c.cc.Invoke(ctx, CheckService_GetCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) GetChecks(ctx context.Context, in *GetChecksRequest, opts ...grpc.CallOption) (*GetChecksResponse, error) {
	out := new(GetChecksResponse)
	err := c.cc.Invoke(ctx, CheckService_GetChecks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) CreateCheck(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*CreateCheckResponse, error) {
	out := new(CreateCheckResponse)
	err := c.cc.Invoke(ctx, CheckService_CreateCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) UpdateCheck(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*UpdateCheckResponse, error) {
	out := new(UpdateCheckResponse)
	err := c.cc.Invoke(ctx, CheckService_UpdateCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) DeleteCheck(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CheckService_DeleteCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServiceServer is the server API for CheckService service.
// All implementations must embed UnimplementedCheckServiceServer
// for forward compatibility
type CheckServiceServer interface {
	GetCheck(context.Context, *GetCheckRequest) (*GetCheckResponse, error)
	GetChecks(context.Context, *GetChecksRequest) (*GetChecksResponse, error)
	CreateCheck(context.Context, *CreateCheckRequest) (*CreateCheckResponse, error)
	UpdateCheck(context.Context, *UpdateCheckRequest) (*UpdateCheckResponse, error)
	DeleteCheck(context.Context, *DeleteCheckRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCheckServiceServer()
}

// UnimplementedCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckServiceServer struct {
}

func (UnimplementedCheckServiceServer) GetCheck(context.Context, *GetCheckRequest) (*GetCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheck not implemented")
}
func (UnimplementedCheckServiceServer) GetChecks(context.Context, *GetChecksRequest) (*GetChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChecks not implemented")
}
func (UnimplementedCheckServiceServer) CreateCheck(context.Context, *CreateCheckRequest) (*CreateCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheck not implemented")
}
func (UnimplementedCheckServiceServer) UpdateCheck(context.Context, *UpdateCheckRequest) (*UpdateCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheck not implemented")
}
func (UnimplementedCheckServiceServer) DeleteCheck(context.Context, *DeleteCheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheck not implemented")
}
func (UnimplementedCheckServiceServer) mustEmbedUnimplementedCheckServiceServer() {}

// UnsafeCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckServiceServer will
// result in compilation errors.
type UnsafeCheckServiceServer interface {
	mustEmbedUnimplementedCheckServiceServer()
}

func RegisterCheckServiceServer(s grpc.ServiceRegistrar, srv CheckServiceServer) {
	s.RegisterService(&CheckService_ServiceDesc, srv)
}

func _CheckService_GetCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).GetCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_GetCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).GetCheck(ctx, req.(*GetCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_GetChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).GetChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_GetChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).GetChecks(ctx, req.(*GetChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_CreateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).CreateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_CreateCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).CreateCheck(ctx, req.(*CreateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_UpdateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).UpdateCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_UpdateCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).UpdateCheck(ctx, req.(*UpdateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_DeleteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).DeleteCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_DeleteCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).DeleteCheck(ctx, req.(*DeleteCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckService_ServiceDesc is the grpc.ServiceDesc for CheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sophrosyne.v0.CheckService",
	HandlerType: (*CheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheck",
			Handler:    _CheckService_GetCheck_Handler,
		},
		{
			MethodName: "GetChecks",
			Handler:    _CheckService_GetChecks_Handler,
		},
		{
			MethodName: "CreateCheck",
			Handler:    _CheckService_CreateCheck_Handler,
		},
		{
			MethodName: "UpdateCheck",
			Handler:    _CheckService_UpdateCheck_Handler,
		},
		{
			MethodName: "DeleteCheck",
			Handler:    _CheckService_DeleteCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sophrosyne/v0/checks.proto",
}
