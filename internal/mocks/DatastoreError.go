// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import mock "github.com/stretchr/testify/mock"

// DatastoreError is an autogenerated mock type for the DatastoreError type
type DatastoreError struct {
	mock.Mock
}

type DatastoreError_Expecter struct {
	mock *mock.Mock
}

func (_m *DatastoreError) EXPECT() *DatastoreError_Expecter {
	return &DatastoreError_Expecter{mock: &_m.Mock}
}

// Code provides a mock function with given fields:
func (_m *DatastoreError) Code() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Code")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatastoreError_Code_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Code'
type DatastoreError_Code_Call struct {
	*mock.Call
}

// Code is a helper method to define mock.On call
func (_e *DatastoreError_Expecter) Code() *DatastoreError_Code_Call {
	return &DatastoreError_Code_Call{Call: _e.mock.On("Code")}
}

func (_c *DatastoreError_Code_Call) Run(run func()) *DatastoreError_Code_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatastoreError_Code_Call) Return(_a0 string) *DatastoreError_Code_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatastoreError_Code_Call) RunAndReturn(run func() string) *DatastoreError_Code_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:
func (_m *DatastoreError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DatastoreError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type DatastoreError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *DatastoreError_Expecter) Error() *DatastoreError_Error_Call {
	return &DatastoreError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *DatastoreError_Error_Call) Run(run func()) *DatastoreError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatastoreError_Error_Call) Return(_a0 string) *DatastoreError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatastoreError_Error_Call) RunAndReturn(run func() string) *DatastoreError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatastoreError creates a new instance of DatastoreError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatastoreError(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatastoreError {
	mock := &DatastoreError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
