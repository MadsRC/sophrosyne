// Code generated by mockery v2.43.2. DO NOT EDIT.

package v0

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	v0 "github.com/madsrc/sophrosyne/internal/grpc/sophrosyne/v0"
)

// MockCheckServiceClient is an autogenerated mock type for the CheckServiceClient type
type MockCheckServiceClient struct {
	mock.Mock
}

type MockCheckServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckServiceClient) EXPECT() *MockCheckServiceClient_Expecter {
	return &MockCheckServiceClient_Expecter{mock: &_m.Mock}
}

// CreateCheck provides a mock function with given fields: ctx, in, opts
func (_m *MockCheckServiceClient) CreateCheck(ctx context.Context, in *v0.CreateCheckRequest, opts ...grpc.CallOption) (*v0.CreateCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheck")
	}

	var r0 *v0.CreateCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateCheckRequest, ...grpc.CallOption) (*v0.CreateCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateCheckRequest, ...grpc.CallOption) *v0.CreateCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.CreateCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.CreateCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceClient_CreateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheck'
type MockCheckServiceClient_CreateCheck_Call struct {
	*mock.Call
}

// CreateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.CreateCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockCheckServiceClient_Expecter) CreateCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockCheckServiceClient_CreateCheck_Call {
	return &MockCheckServiceClient_CreateCheck_Call{Call: _e.mock.On("CreateCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCheckServiceClient_CreateCheck_Call) Run(run func(ctx context.Context, in *v0.CreateCheckRequest, opts ...grpc.CallOption)) *MockCheckServiceClient_CreateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.CreateCheckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCheckServiceClient_CreateCheck_Call) Return(_a0 *v0.CreateCheckResponse, _a1 error) *MockCheckServiceClient_CreateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceClient_CreateCheck_Call) RunAndReturn(run func(context.Context, *v0.CreateCheckRequest, ...grpc.CallOption) (*v0.CreateCheckResponse, error)) *MockCheckServiceClient_CreateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCheck provides a mock function with given fields: ctx, in, opts
func (_m *MockCheckServiceClient) DeleteCheck(ctx context.Context, in *v0.DeleteCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCheck")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteCheckRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteCheckRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.DeleteCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceClient_DeleteCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCheck'
type MockCheckServiceClient_DeleteCheck_Call struct {
	*mock.Call
}

// DeleteCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.DeleteCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockCheckServiceClient_Expecter) DeleteCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockCheckServiceClient_DeleteCheck_Call {
	return &MockCheckServiceClient_DeleteCheck_Call{Call: _e.mock.On("DeleteCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCheckServiceClient_DeleteCheck_Call) Run(run func(ctx context.Context, in *v0.DeleteCheckRequest, opts ...grpc.CallOption)) *MockCheckServiceClient_DeleteCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.DeleteCheckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCheckServiceClient_DeleteCheck_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockCheckServiceClient_DeleteCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceClient_DeleteCheck_Call) RunAndReturn(run func(context.Context, *v0.DeleteCheckRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockCheckServiceClient_DeleteCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheck provides a mock function with given fields: ctx, in, opts
func (_m *MockCheckServiceClient) GetCheck(ctx context.Context, in *v0.GetCheckRequest, opts ...grpc.CallOption) (*v0.GetCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCheck")
	}

	var r0 *v0.GetCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetCheckRequest, ...grpc.CallOption) (*v0.GetCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetCheckRequest, ...grpc.CallOption) *v0.GetCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceClient_GetCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheck'
type MockCheckServiceClient_GetCheck_Call struct {
	*mock.Call
}

// GetCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockCheckServiceClient_Expecter) GetCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockCheckServiceClient_GetCheck_Call {
	return &MockCheckServiceClient_GetCheck_Call{Call: _e.mock.On("GetCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCheckServiceClient_GetCheck_Call) Run(run func(ctx context.Context, in *v0.GetCheckRequest, opts ...grpc.CallOption)) *MockCheckServiceClient_GetCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetCheckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCheckServiceClient_GetCheck_Call) Return(_a0 *v0.GetCheckResponse, _a1 error) *MockCheckServiceClient_GetCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceClient_GetCheck_Call) RunAndReturn(run func(context.Context, *v0.GetCheckRequest, ...grpc.CallOption) (*v0.GetCheckResponse, error)) *MockCheckServiceClient_GetCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecks provides a mock function with given fields: ctx, in, opts
func (_m *MockCheckServiceClient) GetChecks(ctx context.Context, in *v0.GetChecksRequest, opts ...grpc.CallOption) (*v0.GetChecksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChecks")
	}

	var r0 *v0.GetChecksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetChecksRequest, ...grpc.CallOption) (*v0.GetChecksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetChecksRequest, ...grpc.CallOption) *v0.GetChecksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetChecksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetChecksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceClient_GetChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecks'
type MockCheckServiceClient_GetChecks_Call struct {
	*mock.Call
}

// GetChecks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetChecksRequest
//   - opts ...grpc.CallOption
func (_e *MockCheckServiceClient_Expecter) GetChecks(ctx interface{}, in interface{}, opts ...interface{}) *MockCheckServiceClient_GetChecks_Call {
	return &MockCheckServiceClient_GetChecks_Call{Call: _e.mock.On("GetChecks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCheckServiceClient_GetChecks_Call) Run(run func(ctx context.Context, in *v0.GetChecksRequest, opts ...grpc.CallOption)) *MockCheckServiceClient_GetChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetChecksRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCheckServiceClient_GetChecks_Call) Return(_a0 *v0.GetChecksResponse, _a1 error) *MockCheckServiceClient_GetChecks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceClient_GetChecks_Call) RunAndReturn(run func(context.Context, *v0.GetChecksRequest, ...grpc.CallOption) (*v0.GetChecksResponse, error)) *MockCheckServiceClient_GetChecks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheck provides a mock function with given fields: ctx, in, opts
func (_m *MockCheckServiceClient) UpdateCheck(ctx context.Context, in *v0.UpdateCheckRequest, opts ...grpc.CallOption) (*v0.UpdateCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheck")
	}

	var r0 *v0.UpdateCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateCheckRequest, ...grpc.CallOption) (*v0.UpdateCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateCheckRequest, ...grpc.CallOption) *v0.UpdateCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.UpdateCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.UpdateCheckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceClient_UpdateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheck'
type MockCheckServiceClient_UpdateCheck_Call struct {
	*mock.Call
}

// UpdateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.UpdateCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockCheckServiceClient_Expecter) UpdateCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockCheckServiceClient_UpdateCheck_Call {
	return &MockCheckServiceClient_UpdateCheck_Call{Call: _e.mock.On("UpdateCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCheckServiceClient_UpdateCheck_Call) Run(run func(ctx context.Context, in *v0.UpdateCheckRequest, opts ...grpc.CallOption)) *MockCheckServiceClient_UpdateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.UpdateCheckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCheckServiceClient_UpdateCheck_Call) Return(_a0 *v0.UpdateCheckResponse, _a1 error) *MockCheckServiceClient_UpdateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceClient_UpdateCheck_Call) RunAndReturn(run func(context.Context, *v0.UpdateCheckRequest, ...grpc.CallOption) (*v0.UpdateCheckResponse, error)) *MockCheckServiceClient_UpdateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckServiceClient creates a new instance of MockCheckServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckServiceClient {
	mock := &MockCheckServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
