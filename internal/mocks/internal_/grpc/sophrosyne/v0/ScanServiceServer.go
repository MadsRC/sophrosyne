// Code generated by mockery v2.43.2. DO NOT EDIT.

package v0

import (
	context "context"

	v0 "github.com/madsrc/sophrosyne/internal/grpc/sophrosyne/v0"
	mock "github.com/stretchr/testify/mock"
)

// MockScanServiceServer is an autogenerated mock type for the ScanServiceServer type
type MockScanServiceServer struct {
	mock.Mock
}

type MockScanServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScanServiceServer) EXPECT() *MockScanServiceServer_Expecter {
	return &MockScanServiceServer_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: _a0, _a1
func (_m *MockScanServiceServer) Scan(_a0 context.Context, _a1 *v0.ScanRequest) (*v0.ScanResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 *v0.ScanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.ScanRequest) (*v0.ScanResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.ScanRequest) *v0.ScanResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.ScanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.ScanRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScanServiceServer_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockScanServiceServer_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.ScanRequest
func (_e *MockScanServiceServer_Expecter) Scan(_a0 interface{}, _a1 interface{}) *MockScanServiceServer_Scan_Call {
	return &MockScanServiceServer_Scan_Call{Call: _e.mock.On("Scan", _a0, _a1)}
}

func (_c *MockScanServiceServer_Scan_Call) Run(run func(_a0 context.Context, _a1 *v0.ScanRequest)) *MockScanServiceServer_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.ScanRequest))
	})
	return _c
}

func (_c *MockScanServiceServer_Scan_Call) Return(_a0 *v0.ScanResponse, _a1 error) *MockScanServiceServer_Scan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScanServiceServer_Scan_Call) RunAndReturn(run func(context.Context, *v0.ScanRequest) (*v0.ScanResponse, error)) *MockScanServiceServer_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedScanServiceServer provides a mock function with given fields:
func (_m *MockScanServiceServer) mustEmbedUnimplementedScanServiceServer() {
	_m.Called()
}

// MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedScanServiceServer'
type MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedScanServiceServer is a helper method to define mock.On call
func (_e *MockScanServiceServer_Expecter) mustEmbedUnimplementedScanServiceServer() *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call {
	return &MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedScanServiceServer")}
}

func (_c *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call) Run(run func()) *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call) Return() *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call) RunAndReturn(run func()) *MockScanServiceServer_mustEmbedUnimplementedScanServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScanServiceServer creates a new instance of MockScanServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanServiceServer {
	mock := &MockScanServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
