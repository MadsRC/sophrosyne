// Code generated by mockery v2.43.2. DO NOT EDIT.

package v0

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	v0 "github.com/madsrc/sophrosyne/internal/grpc/sophrosyne/v0"
)

// MockUserServiceClient is an autogenerated mock type for the UserServiceClient type
type MockUserServiceClient struct {
	mock.Mock
}

type MockUserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceClient) EXPECT() *MockUserServiceClient_Expecter {
	return &MockUserServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) CreateUser(ctx context.Context, in *v0.CreateUserRequest, opts ...grpc.CallOption) (*v0.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *v0.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateUserRequest, ...grpc.CallOption) (*v0.CreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateUserRequest, ...grpc.CallOption) *v0.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserServiceClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.CreateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_CreateUser_Call {
	return &MockUserServiceClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_CreateUser_Call) Run(run func(ctx context.Context, in *v0.CreateUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_CreateUser_Call) Return(_a0 *v0.CreateUserResponse, _a1 error) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_CreateUser_Call) RunAndReturn(run func(context.Context, *v0.CreateUserRequest, ...grpc.CallOption) (*v0.CreateUserResponse, error)) *MockUserServiceClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) DeleteUser(ctx context.Context, in *v0.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteUserRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteUserRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.DeleteUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserServiceClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.DeleteUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) DeleteUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_DeleteUser_Call {
	return &MockUserServiceClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_DeleteUser_Call) Run(run func(ctx context.Context, in *v0.DeleteUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.DeleteUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_DeleteUser_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_DeleteUser_Call) RunAndReturn(run func(context.Context, *v0.DeleteUserRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockUserServiceClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetUser(ctx context.Context, in *v0.GetUserRequest, opts ...grpc.CallOption) (*v0.GetUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *v0.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetUserRequest, ...grpc.CallOption) (*v0.GetUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetUserRequest, ...grpc.CallOption) *v0.GetUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserServiceClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUser_Call {
	return &MockUserServiceClient_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUser_Call) Run(run func(ctx context.Context, in *v0.GetUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUser_Call) Return(_a0 *v0.GetUserResponse, _a1 error) *MockUserServiceClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetUser_Call) RunAndReturn(run func(context.Context, *v0.GetUserRequest, ...grpc.CallOption) (*v0.GetUserResponse, error)) *MockUserServiceClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) GetUsers(ctx context.Context, in *v0.GetUsersRequest, opts ...grpc.CallOption) (*v0.GetUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *v0.GetUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetUsersRequest, ...grpc.CallOption) (*v0.GetUsersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetUsersRequest, ...grpc.CallOption) *v0.GetUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserServiceClient_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetUsersRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) GetUsers(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_GetUsers_Call {
	return &MockUserServiceClient_GetUsers_Call{Call: _e.mock.On("GetUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_GetUsers_Call) Run(run func(ctx context.Context, in *v0.GetUsersRequest, opts ...grpc.CallOption)) *MockUserServiceClient_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_GetUsers_Call) Return(_a0 *v0.GetUsersResponse, _a1 error) *MockUserServiceClient_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_GetUsers_Call) RunAndReturn(run func(context.Context, *v0.GetUsersRequest, ...grpc.CallOption) (*v0.GetUsersResponse, error)) *MockUserServiceClient_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RotateToken provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) RotateToken(ctx context.Context, in *v0.RotateTokenRequest, opts ...grpc.CallOption) (*v0.RotateTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 *v0.RotateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.RotateTokenRequest, ...grpc.CallOption) (*v0.RotateTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.RotateTokenRequest, ...grpc.CallOption) *v0.RotateTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.RotateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.RotateTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_RotateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateToken'
type MockUserServiceClient_RotateToken_Call struct {
	*mock.Call
}

// RotateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.RotateTokenRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) RotateToken(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_RotateToken_Call {
	return &MockUserServiceClient_RotateToken_Call{Call: _e.mock.On("RotateToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_RotateToken_Call) Run(run func(ctx context.Context, in *v0.RotateTokenRequest, opts ...grpc.CallOption)) *MockUserServiceClient_RotateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.RotateTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_RotateToken_Call) Return(_a0 *v0.RotateTokenResponse, _a1 error) *MockUserServiceClient_RotateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_RotateToken_Call) RunAndReturn(run func(context.Context, *v0.RotateTokenRequest, ...grpc.CallOption) (*v0.RotateTokenResponse, error)) *MockUserServiceClient_RotateToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) UpdateUser(ctx context.Context, in *v0.UpdateUserRequest, opts ...grpc.CallOption) (*v0.UpdateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *v0.UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateUserRequest, ...grpc.CallOption) (*v0.UpdateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateUserRequest, ...grpc.CallOption) *v0.UpdateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserServiceClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.UpdateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) UpdateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_UpdateUser_Call {
	return &MockUserServiceClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_UpdateUser_Call) Run(run func(ctx context.Context, in *v0.UpdateUserRequest, opts ...grpc.CallOption)) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.UpdateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_UpdateUser_Call) Return(_a0 *v0.UpdateUserResponse, _a1 error) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_UpdateUser_Call) RunAndReturn(run func(context.Context, *v0.UpdateUserRequest, ...grpc.CallOption) (*v0.UpdateUserResponse, error)) *MockUserServiceClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceClient creates a new instance of MockUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceClient {
	mock := &MockUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
