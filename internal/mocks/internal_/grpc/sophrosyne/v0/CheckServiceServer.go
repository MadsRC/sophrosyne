// Code generated by mockery v2.43.2. DO NOT EDIT.

package v0

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	v0 "github.com/madsrc/sophrosyne/internal/grpc/sophrosyne/v0"
)

// MockCheckServiceServer is an autogenerated mock type for the CheckServiceServer type
type MockCheckServiceServer struct {
	mock.Mock
}

type MockCheckServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckServiceServer) EXPECT() *MockCheckServiceServer_Expecter {
	return &MockCheckServiceServer_Expecter{mock: &_m.Mock}
}

// CreateCheck provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) CreateCheck(_a0 context.Context, _a1 *v0.CreateCheckRequest) (*v0.CreateCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheck")
	}

	var r0 *v0.CreateCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateCheckRequest) (*v0.CreateCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateCheckRequest) *v0.CreateCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.CreateCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.CreateCheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_CreateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheck'
type MockCheckServiceServer_CreateCheck_Call struct {
	*mock.Call
}

// CreateCheck is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.CreateCheckRequest
func (_e *MockCheckServiceServer_Expecter) CreateCheck(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_CreateCheck_Call {
	return &MockCheckServiceServer_CreateCheck_Call{Call: _e.mock.On("CreateCheck", _a0, _a1)}
}

func (_c *MockCheckServiceServer_CreateCheck_Call) Run(run func(_a0 context.Context, _a1 *v0.CreateCheckRequest)) *MockCheckServiceServer_CreateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.CreateCheckRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_CreateCheck_Call) Return(_a0 *v0.CreateCheckResponse, _a1 error) *MockCheckServiceServer_CreateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_CreateCheck_Call) RunAndReturn(run func(context.Context, *v0.CreateCheckRequest) (*v0.CreateCheckResponse, error)) *MockCheckServiceServer_CreateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCheck provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) DeleteCheck(_a0 context.Context, _a1 *v0.DeleteCheckRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCheck")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteCheckRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteCheckRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.DeleteCheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_DeleteCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCheck'
type MockCheckServiceServer_DeleteCheck_Call struct {
	*mock.Call
}

// DeleteCheck is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.DeleteCheckRequest
func (_e *MockCheckServiceServer_Expecter) DeleteCheck(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_DeleteCheck_Call {
	return &MockCheckServiceServer_DeleteCheck_Call{Call: _e.mock.On("DeleteCheck", _a0, _a1)}
}

func (_c *MockCheckServiceServer_DeleteCheck_Call) Run(run func(_a0 context.Context, _a1 *v0.DeleteCheckRequest)) *MockCheckServiceServer_DeleteCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.DeleteCheckRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_DeleteCheck_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockCheckServiceServer_DeleteCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_DeleteCheck_Call) RunAndReturn(run func(context.Context, *v0.DeleteCheckRequest) (*emptypb.Empty, error)) *MockCheckServiceServer_DeleteCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheck provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) GetCheck(_a0 context.Context, _a1 *v0.GetCheckRequest) (*v0.GetCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCheck")
	}

	var r0 *v0.GetCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetCheckRequest) (*v0.GetCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetCheckRequest) *v0.GetCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetCheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_GetCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheck'
type MockCheckServiceServer_GetCheck_Call struct {
	*mock.Call
}

// GetCheck is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.GetCheckRequest
func (_e *MockCheckServiceServer_Expecter) GetCheck(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_GetCheck_Call {
	return &MockCheckServiceServer_GetCheck_Call{Call: _e.mock.On("GetCheck", _a0, _a1)}
}

func (_c *MockCheckServiceServer_GetCheck_Call) Run(run func(_a0 context.Context, _a1 *v0.GetCheckRequest)) *MockCheckServiceServer_GetCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.GetCheckRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_GetCheck_Call) Return(_a0 *v0.GetCheckResponse, _a1 error) *MockCheckServiceServer_GetCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_GetCheck_Call) RunAndReturn(run func(context.Context, *v0.GetCheckRequest) (*v0.GetCheckResponse, error)) *MockCheckServiceServer_GetCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecks provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) GetChecks(_a0 context.Context, _a1 *v0.GetChecksRequest) (*v0.GetChecksResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetChecks")
	}

	var r0 *v0.GetChecksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetChecksRequest) (*v0.GetChecksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetChecksRequest) *v0.GetChecksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetChecksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetChecksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_GetChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecks'
type MockCheckServiceServer_GetChecks_Call struct {
	*mock.Call
}

// GetChecks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.GetChecksRequest
func (_e *MockCheckServiceServer_Expecter) GetChecks(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_GetChecks_Call {
	return &MockCheckServiceServer_GetChecks_Call{Call: _e.mock.On("GetChecks", _a0, _a1)}
}

func (_c *MockCheckServiceServer_GetChecks_Call) Run(run func(_a0 context.Context, _a1 *v0.GetChecksRequest)) *MockCheckServiceServer_GetChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.GetChecksRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_GetChecks_Call) Return(_a0 *v0.GetChecksResponse, _a1 error) *MockCheckServiceServer_GetChecks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_GetChecks_Call) RunAndReturn(run func(context.Context, *v0.GetChecksRequest) (*v0.GetChecksResponse, error)) *MockCheckServiceServer_GetChecks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheck provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) UpdateCheck(_a0 context.Context, _a1 *v0.UpdateCheckRequest) (*v0.UpdateCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheck")
	}

	var r0 *v0.UpdateCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateCheckRequest) (*v0.UpdateCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateCheckRequest) *v0.UpdateCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.UpdateCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.UpdateCheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_UpdateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheck'
type MockCheckServiceServer_UpdateCheck_Call struct {
	*mock.Call
}

// UpdateCheck is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v0.UpdateCheckRequest
func (_e *MockCheckServiceServer_Expecter) UpdateCheck(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_UpdateCheck_Call {
	return &MockCheckServiceServer_UpdateCheck_Call{Call: _e.mock.On("UpdateCheck", _a0, _a1)}
}

func (_c *MockCheckServiceServer_UpdateCheck_Call) Run(run func(_a0 context.Context, _a1 *v0.UpdateCheckRequest)) *MockCheckServiceServer_UpdateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v0.UpdateCheckRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_UpdateCheck_Call) Return(_a0 *v0.UpdateCheckResponse, _a1 error) *MockCheckServiceServer_UpdateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_UpdateCheck_Call) RunAndReturn(run func(context.Context, *v0.UpdateCheckRequest) (*v0.UpdateCheckResponse, error)) *MockCheckServiceServer_UpdateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCheckServiceServer provides a mock function with given fields:
func (_m *MockCheckServiceServer) mustEmbedUnimplementedCheckServiceServer() {
	_m.Called()
}

// MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCheckServiceServer'
type MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCheckServiceServer is a helper method to define mock.On call
func (_e *MockCheckServiceServer_Expecter) mustEmbedUnimplementedCheckServiceServer() *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	return &MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCheckServiceServer")}
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) Run(run func()) *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) Return() *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) RunAndReturn(run func()) *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckServiceServer creates a new instance of MockCheckServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckServiceServer {
	mock := &MockCheckServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
