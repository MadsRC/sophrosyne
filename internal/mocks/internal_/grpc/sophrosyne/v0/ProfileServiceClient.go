// Code generated by mockery v2.43.2. DO NOT EDIT.

package v0

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	v0 "github.com/madsrc/sophrosyne/internal/grpc/sophrosyne/v0"
)

// MockProfileServiceClient is an autogenerated mock type for the ProfileServiceClient type
type MockProfileServiceClient struct {
	mock.Mock
}

type MockProfileServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileServiceClient) EXPECT() *MockProfileServiceClient_Expecter {
	return &MockProfileServiceClient_Expecter{mock: &_m.Mock}
}

// CreateProfile provides a mock function with given fields: ctx, in, opts
func (_m *MockProfileServiceClient) CreateProfile(ctx context.Context, in *v0.CreateProfileRequest, opts ...grpc.CallOption) (*v0.CreateProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *v0.CreateProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateProfileRequest, ...grpc.CallOption) (*v0.CreateProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.CreateProfileRequest, ...grpc.CallOption) *v0.CreateProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.CreateProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.CreateProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceClient_CreateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfile'
type MockProfileServiceClient_CreateProfile_Call struct {
	*mock.Call
}

// CreateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.CreateProfileRequest
//   - opts ...grpc.CallOption
func (_e *MockProfileServiceClient_Expecter) CreateProfile(ctx interface{}, in interface{}, opts ...interface{}) *MockProfileServiceClient_CreateProfile_Call {
	return &MockProfileServiceClient_CreateProfile_Call{Call: _e.mock.On("CreateProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProfileServiceClient_CreateProfile_Call) Run(run func(ctx context.Context, in *v0.CreateProfileRequest, opts ...grpc.CallOption)) *MockProfileServiceClient_CreateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.CreateProfileRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProfileServiceClient_CreateProfile_Call) Return(_a0 *v0.CreateProfileResponse, _a1 error) *MockProfileServiceClient_CreateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceClient_CreateProfile_Call) RunAndReturn(run func(context.Context, *v0.CreateProfileRequest, ...grpc.CallOption) (*v0.CreateProfileResponse, error)) *MockProfileServiceClient_CreateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfile provides a mock function with given fields: ctx, in, opts
func (_m *MockProfileServiceClient) DeleteProfile(ctx context.Context, in *v0.DeleteProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteProfileRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.DeleteProfileRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.DeleteProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceClient_DeleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfile'
type MockProfileServiceClient_DeleteProfile_Call struct {
	*mock.Call
}

// DeleteProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.DeleteProfileRequest
//   - opts ...grpc.CallOption
func (_e *MockProfileServiceClient_Expecter) DeleteProfile(ctx interface{}, in interface{}, opts ...interface{}) *MockProfileServiceClient_DeleteProfile_Call {
	return &MockProfileServiceClient_DeleteProfile_Call{Call: _e.mock.On("DeleteProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProfileServiceClient_DeleteProfile_Call) Run(run func(ctx context.Context, in *v0.DeleteProfileRequest, opts ...grpc.CallOption)) *MockProfileServiceClient_DeleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.DeleteProfileRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProfileServiceClient_DeleteProfile_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockProfileServiceClient_DeleteProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceClient_DeleteProfile_Call) RunAndReturn(run func(context.Context, *v0.DeleteProfileRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *MockProfileServiceClient_DeleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfile provides a mock function with given fields: ctx, in, opts
func (_m *MockProfileServiceClient) GetProfile(ctx context.Context, in *v0.GetProfileRequest, opts ...grpc.CallOption) (*v0.GetProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *v0.GetProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetProfileRequest, ...grpc.CallOption) (*v0.GetProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetProfileRequest, ...grpc.CallOption) *v0.GetProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceClient_GetProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfile'
type MockProfileServiceClient_GetProfile_Call struct {
	*mock.Call
}

// GetProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetProfileRequest
//   - opts ...grpc.CallOption
func (_e *MockProfileServiceClient_Expecter) GetProfile(ctx interface{}, in interface{}, opts ...interface{}) *MockProfileServiceClient_GetProfile_Call {
	return &MockProfileServiceClient_GetProfile_Call{Call: _e.mock.On("GetProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProfileServiceClient_GetProfile_Call) Run(run func(ctx context.Context, in *v0.GetProfileRequest, opts ...grpc.CallOption)) *MockProfileServiceClient_GetProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetProfileRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProfileServiceClient_GetProfile_Call) Return(_a0 *v0.GetProfileResponse, _a1 error) *MockProfileServiceClient_GetProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceClient_GetProfile_Call) RunAndReturn(run func(context.Context, *v0.GetProfileRequest, ...grpc.CallOption) (*v0.GetProfileResponse, error)) *MockProfileServiceClient_GetProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfiles provides a mock function with given fields: ctx, in, opts
func (_m *MockProfileServiceClient) GetProfiles(ctx context.Context, in *v0.GetProfilesRequest, opts ...grpc.CallOption) (*v0.GetProfilesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 *v0.GetProfilesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetProfilesRequest, ...grpc.CallOption) (*v0.GetProfilesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.GetProfilesRequest, ...grpc.CallOption) *v0.GetProfilesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.GetProfilesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.GetProfilesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceClient_GetProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfiles'
type MockProfileServiceClient_GetProfiles_Call struct {
	*mock.Call
}

// GetProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.GetProfilesRequest
//   - opts ...grpc.CallOption
func (_e *MockProfileServiceClient_Expecter) GetProfiles(ctx interface{}, in interface{}, opts ...interface{}) *MockProfileServiceClient_GetProfiles_Call {
	return &MockProfileServiceClient_GetProfiles_Call{Call: _e.mock.On("GetProfiles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProfileServiceClient_GetProfiles_Call) Run(run func(ctx context.Context, in *v0.GetProfilesRequest, opts ...grpc.CallOption)) *MockProfileServiceClient_GetProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.GetProfilesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProfileServiceClient_GetProfiles_Call) Return(_a0 *v0.GetProfilesResponse, _a1 error) *MockProfileServiceClient_GetProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceClient_GetProfiles_Call) RunAndReturn(run func(context.Context, *v0.GetProfilesRequest, ...grpc.CallOption) (*v0.GetProfilesResponse, error)) *MockProfileServiceClient_GetProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, in, opts
func (_m *MockProfileServiceClient) UpdateProfile(ctx context.Context, in *v0.UpdateProfileRequest, opts ...grpc.CallOption) (*v0.UpdateProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *v0.UpdateProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateProfileRequest, ...grpc.CallOption) (*v0.UpdateProfileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v0.UpdateProfileRequest, ...grpc.CallOption) *v0.UpdateProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v0.UpdateProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v0.UpdateProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceClient_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockProfileServiceClient_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v0.UpdateProfileRequest
//   - opts ...grpc.CallOption
func (_e *MockProfileServiceClient_Expecter) UpdateProfile(ctx interface{}, in interface{}, opts ...interface{}) *MockProfileServiceClient_UpdateProfile_Call {
	return &MockProfileServiceClient_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProfileServiceClient_UpdateProfile_Call) Run(run func(ctx context.Context, in *v0.UpdateProfileRequest, opts ...grpc.CallOption)) *MockProfileServiceClient_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v0.UpdateProfileRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProfileServiceClient_UpdateProfile_Call) Return(_a0 *v0.UpdateProfileResponse, _a1 error) *MockProfileServiceClient_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceClient_UpdateProfile_Call) RunAndReturn(run func(context.Context, *v0.UpdateProfileRequest, ...grpc.CallOption) (*v0.UpdateProfileResponse, error)) *MockProfileServiceClient_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfileServiceClient creates a new instance of MockProfileServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
