// Code generated by mockery v2.43.0. DO NOT EDIT.

package checks

import (
	context "context"

	checks "github.com/madsrc/sophrosyne/internal/grpc/checks"

	mock "github.com/stretchr/testify/mock"
)

// MockCheckServiceServer is an autogenerated mock type for the CheckServiceServer type
type MockCheckServiceServer struct {
	mock.Mock
}

type MockCheckServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckServiceServer) EXPECT() *MockCheckServiceServer_Expecter {
	return &MockCheckServiceServer_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *MockCheckServiceServer) Check(_a0 context.Context, _a1 *checks.CheckRequest) (*checks.CheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *checks.CheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *checks.CheckRequest) (*checks.CheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *checks.CheckRequest) *checks.CheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checks.CheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *checks.CheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckServiceServer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockCheckServiceServer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *checks.CheckRequest
func (_e *MockCheckServiceServer_Expecter) Check(_a0 interface{}, _a1 interface{}) *MockCheckServiceServer_Check_Call {
	return &MockCheckServiceServer_Check_Call{Call: _e.mock.On("Check", _a0, _a1)}
}

func (_c *MockCheckServiceServer_Check_Call) Run(run func(_a0 context.Context, _a1 *checks.CheckRequest)) *MockCheckServiceServer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*checks.CheckRequest))
	})
	return _c
}

func (_c *MockCheckServiceServer_Check_Call) Return(_a0 *checks.CheckResponse, _a1 error) *MockCheckServiceServer_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckServiceServer_Check_Call) RunAndReturn(run func(context.Context, *checks.CheckRequest) (*checks.CheckResponse, error)) *MockCheckServiceServer_Check_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCheckServiceServer provides a mock function with given fields:
func (_m *MockCheckServiceServer) mustEmbedUnimplementedCheckServiceServer() {
	_m.Called()
}

// MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCheckServiceServer'
type MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCheckServiceServer is a helper method to define mock.On call
func (_e *MockCheckServiceServer_Expecter) mustEmbedUnimplementedCheckServiceServer() *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	return &MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCheckServiceServer")}
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) Run(run func()) *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) Return() *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call) RunAndReturn(run func()) *MockCheckServiceServer_mustEmbedUnimplementedCheckServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckServiceServer creates a new instance of MockCheckServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckServiceServer {
	mock := &MockCheckServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
