// Code generated by mockery v2.39.1. DO NOT EDIT.

package checks

import mock "github.com/stretchr/testify/mock"

// isCheckRequest_Check is an autogenerated mock type for the isCheckRequest_Check type
type isCheckRequest_Check struct {
	mock.Mock
}

type isCheckRequest_Check_Expecter struct {
	mock *mock.Mock
}

func (_m *isCheckRequest_Check) EXPECT() *isCheckRequest_Check_Expecter {
	return &isCheckRequest_Check_Expecter{mock: &_m.Mock}
}

// isCheckRequest_Check provides a mock function with given fields:
func (_m *isCheckRequest_Check) isCheckRequest_Check() {
	_m.Called()
}

// isCheckRequest_Check_isCheckRequest_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isCheckRequest_Check'
type isCheckRequest_Check_isCheckRequest_Check_Call struct {
	*mock.Call
}

// isCheckRequest_Check is a helper method to define mock.On call
func (_e *isCheckRequest_Check_Expecter) isCheckRequest_Check() *isCheckRequest_Check_isCheckRequest_Check_Call {
	return &isCheckRequest_Check_isCheckRequest_Check_Call{Call: _e.mock.On("isCheckRequest_Check")}
}

func (_c *isCheckRequest_Check_isCheckRequest_Check_Call) Run(run func()) *isCheckRequest_Check_isCheckRequest_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *isCheckRequest_Check_isCheckRequest_Check_Call) Return() *isCheckRequest_Check_isCheckRequest_Check_Call {
	_c.Call.Return()
	return _c
}

func (_c *isCheckRequest_Check_isCheckRequest_Check_Call) RunAndReturn(run func()) *isCheckRequest_Check_isCheckRequest_Check_Call {
	_c.Call.Return(run)
	return _c
}

// newIsCheckRequest_Check creates a new instance of isCheckRequest_Check. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsCheckRequest_Check(t interface {
	mock.TestingT
	Cleanup(func())
}) *isCheckRequest_Check {
	mock := &isCheckRequest_Check{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
