// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthorizationProvider is an autogenerated mock type for the AuthorizationProvider type
type AuthorizationProvider struct {
	mock.Mock
}

type AuthorizationProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationProvider) EXPECT() *AuthorizationProvider_Expecter {
	return &AuthorizationProvider_Expecter{mock: &_m.Mock}
}

// IsAuthorized provides a mock function with given fields: ctx, req
func (_m *AuthorizationProvider) IsAuthorized(ctx context.Context, req AuthorizationRequest) bool {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, AuthorizationRequest) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuthorizationProvider_IsAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthorized'
type AuthorizationProvider_IsAuthorized_Call struct {
	*mock.Call
}

// IsAuthorized is a helper method to define mock.On call
//   - ctx context.Context
//   - req AuthorizationRequest
func (_e *AuthorizationProvider_Expecter) IsAuthorized(ctx interface{}, req interface{}) *AuthorizationProvider_IsAuthorized_Call {
	return &AuthorizationProvider_IsAuthorized_Call{Call: _e.mock.On("IsAuthorized", ctx, req)}
}

func (_c *AuthorizationProvider_IsAuthorized_Call) Run(run func(ctx context.Context, req AuthorizationRequest)) *AuthorizationProvider_IsAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AuthorizationRequest))
	})
	return _c
}

func (_c *AuthorizationProvider_IsAuthorized_Call) Return(_a0 bool) *AuthorizationProvider_IsAuthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationProvider_IsAuthorized_Call) RunAndReturn(run func(context.Context, AuthorizationRequest) bool) *AuthorizationProvider_IsAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizationProvider creates a new instance of AuthorizationProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizationProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizationProvider {
	mock := &AuthorizationProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
