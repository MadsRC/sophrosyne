// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	sophrosyne "github.com/madsrc/sophrosyne"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthorizationProvider is an autogenerated mock type for the AuthorizationProvider type
type MockAuthorizationProvider struct {
	mock.Mock
}

type MockAuthorizationProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationProvider) EXPECT() *MockAuthorizationProvider_Expecter {
	return &MockAuthorizationProvider_Expecter{mock: &_m.Mock}
}

// IsAuthorized provides a mock function with given fields: ctx, req
func (_m *MockAuthorizationProvider) IsAuthorized(ctx context.Context, req sophrosyne.AuthorizationRequest) bool {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.AuthorizationRequest) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuthorizationProvider_IsAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthorized'
type MockAuthorizationProvider_IsAuthorized_Call struct {
	*mock.Call
}

// IsAuthorized is a helper method to define mock.On call
//   - ctx context.Context
//   - req sophrosyne.AuthorizationRequest
func (_e *MockAuthorizationProvider_Expecter) IsAuthorized(ctx interface{}, req interface{}) *MockAuthorizationProvider_IsAuthorized_Call {
	return &MockAuthorizationProvider_IsAuthorized_Call{Call: _e.mock.On("IsAuthorized", ctx, req)}
}

func (_c *MockAuthorizationProvider_IsAuthorized_Call) Run(run func(ctx context.Context, req sophrosyne.AuthorizationRequest)) *MockAuthorizationProvider_IsAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.AuthorizationRequest))
	})
	return _c
}

func (_c *MockAuthorizationProvider_IsAuthorized_Call) Return(_a0 bool) *MockAuthorizationProvider_IsAuthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorizationProvider_IsAuthorized_Call) RunAndReturn(run func(context.Context, sophrosyne.AuthorizationRequest) bool) *MockAuthorizationProvider_IsAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizationProvider creates a new instance of MockAuthorizationProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationProvider {
	mock := &MockAuthorizationProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
