// Code generated by mockery v2.43.0. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	sophrosyne "github.com/madsrc/sophrosyne"
	mock "github.com/stretchr/testify/mock"
)

// MockProfileService is an autogenerated mock type for the ProfileService type
type MockProfileService struct {
	mock.Mock
}

type MockProfileService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileService) EXPECT() *MockProfileService_Expecter {
	return &MockProfileService_Expecter{mock: &_m.Mock}
}

// CreateProfile provides a mock function with given fields: ctx, profile
func (_m *MockProfileService) CreateProfile(ctx context.Context, profile sophrosyne.CreateProfileRequest) (sophrosyne.Profile, error) {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 sophrosyne.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateProfileRequest) (sophrosyne.Profile, error)); ok {
		return rf(ctx, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateProfileRequest) sophrosyne.Profile); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Get(0).(sophrosyne.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.CreateProfileRequest) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_CreateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfile'
type MockProfileService_CreateProfile_Call struct {
	*mock.Call
}

// CreateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - profile sophrosyne.CreateProfileRequest
func (_e *MockProfileService_Expecter) CreateProfile(ctx interface{}, profile interface{}) *MockProfileService_CreateProfile_Call {
	return &MockProfileService_CreateProfile_Call{Call: _e.mock.On("CreateProfile", ctx, profile)}
}

func (_c *MockProfileService_CreateProfile_Call) Run(run func(ctx context.Context, profile sophrosyne.CreateProfileRequest)) *MockProfileService_CreateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.CreateProfileRequest))
	})
	return _c
}

func (_c *MockProfileService_CreateProfile_Call) Return(_a0 sophrosyne.Profile, _a1 error) *MockProfileService_CreateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_CreateProfile_Call) RunAndReturn(run func(context.Context, sophrosyne.CreateProfileRequest) (sophrosyne.Profile, error)) *MockProfileService_CreateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfile provides a mock function with given fields: ctx, name
func (_m *MockProfileService) DeleteProfile(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProfileService_DeleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfile'
type MockProfileService_DeleteProfile_Call struct {
	*mock.Call
}

// DeleteProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProfileService_Expecter) DeleteProfile(ctx interface{}, name interface{}) *MockProfileService_DeleteProfile_Call {
	return &MockProfileService_DeleteProfile_Call{Call: _e.mock.On("DeleteProfile", ctx, name)}
}

func (_c *MockProfileService_DeleteProfile_Call) Run(run func(ctx context.Context, name string)) *MockProfileService_DeleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProfileService_DeleteProfile_Call) Return(_a0 error) *MockProfileService_DeleteProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProfileService_DeleteProfile_Call) RunAndReturn(run func(context.Context, string) error) *MockProfileService_DeleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfile provides a mock function with given fields: ctx, id
func (_m *MockProfileService) GetProfile(ctx context.Context, id string) (sophrosyne.Profile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 sophrosyne.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.Profile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sophrosyne.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_GetProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfile'
type MockProfileService_GetProfile_Call struct {
	*mock.Call
}

// GetProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProfileService_Expecter) GetProfile(ctx interface{}, id interface{}) *MockProfileService_GetProfile_Call {
	return &MockProfileService_GetProfile_Call{Call: _e.mock.On("GetProfile", ctx, id)}
}

func (_c *MockProfileService_GetProfile_Call) Run(run func(ctx context.Context, id string)) *MockProfileService_GetProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProfileService_GetProfile_Call) Return(_a0 sophrosyne.Profile, _a1 error) *MockProfileService_GetProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_GetProfile_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.Profile, error)) *MockProfileService_GetProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileByName provides a mock function with given fields: ctx, name
func (_m *MockProfileService) GetProfileByName(ctx context.Context, name string) (sophrosyne.Profile, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileByName")
	}

	var r0 sophrosyne.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.Profile, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.Profile); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(sophrosyne.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_GetProfileByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileByName'
type MockProfileService_GetProfileByName_Call struct {
	*mock.Call
}

// GetProfileByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProfileService_Expecter) GetProfileByName(ctx interface{}, name interface{}) *MockProfileService_GetProfileByName_Call {
	return &MockProfileService_GetProfileByName_Call{Call: _e.mock.On("GetProfileByName", ctx, name)}
}

func (_c *MockProfileService_GetProfileByName_Call) Run(run func(ctx context.Context, name string)) *MockProfileService_GetProfileByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProfileService_GetProfileByName_Call) Return(_a0 sophrosyne.Profile, _a1 error) *MockProfileService_GetProfileByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_GetProfileByName_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.Profile, error)) *MockProfileService_GetProfileByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfiles provides a mock function with given fields: ctx, cursor
func (_m *MockProfileService) GetProfiles(ctx context.Context, cursor *sophrosyne.DatabaseCursor) ([]sophrosyne.Profile, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 []sophrosyne.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.Profile, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) []sophrosyne.Profile); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sophrosyne.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sophrosyne.DatabaseCursor) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_GetProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfiles'
type MockProfileService_GetProfiles_Call struct {
	*mock.Call
}

// GetProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor *sophrosyne.DatabaseCursor
func (_e *MockProfileService_Expecter) GetProfiles(ctx interface{}, cursor interface{}) *MockProfileService_GetProfiles_Call {
	return &MockProfileService_GetProfiles_Call{Call: _e.mock.On("GetProfiles", ctx, cursor)}
}

func (_c *MockProfileService_GetProfiles_Call) Run(run func(ctx context.Context, cursor *sophrosyne.DatabaseCursor)) *MockProfileService_GetProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sophrosyne.DatabaseCursor))
	})
	return _c
}

func (_c *MockProfileService_GetProfiles_Call) Return(_a0 []sophrosyne.Profile, _a1 error) *MockProfileService_GetProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_GetProfiles_Call) RunAndReturn(run func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.Profile, error)) *MockProfileService_GetProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, profile
func (_m *MockProfileService) UpdateProfile(ctx context.Context, profile sophrosyne.UpdateProfileRequest) (sophrosyne.Profile, error) {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 sophrosyne.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateProfileRequest) (sophrosyne.Profile, error)); ok {
		return rf(ctx, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateProfileRequest) sophrosyne.Profile); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Get(0).(sophrosyne.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.UpdateProfileRequest) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileService_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockProfileService_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - profile sophrosyne.UpdateProfileRequest
func (_e *MockProfileService_Expecter) UpdateProfile(ctx interface{}, profile interface{}) *MockProfileService_UpdateProfile_Call {
	return &MockProfileService_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, profile)}
}

func (_c *MockProfileService_UpdateProfile_Call) Run(run func(ctx context.Context, profile sophrosyne.UpdateProfileRequest)) *MockProfileService_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.UpdateProfileRequest))
	})
	return _c
}

func (_c *MockProfileService_UpdateProfile_Call) Return(_a0 sophrosyne.Profile, _a1 error) *MockProfileService_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileService_UpdateProfile_Call) RunAndReturn(run func(context.Context, sophrosyne.UpdateProfileRequest) (sophrosyne.Profile, error)) *MockProfileService_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfileService creates a new instance of MockProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileService {
	mock := &MockProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
