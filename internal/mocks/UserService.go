// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserService) CreateUser(ctx context.Context, user CreateUserRequest) (User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserRequest) (User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateUserRequest) User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateUserRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user CreateUserRequest
func (_e *UserService_Expecter) CreateUser(ctx interface{}, user interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx context.Context, user CreateUserRequest)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserRequest))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 User, _a1 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(context.Context, CreateUserRequest) (User, error)) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, name
func (_m *UserService) DeleteUser(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *UserService_Expecter) DeleteUser(ctx interface{}, name interface{}) *UserService_DeleteUser_Call {
	return &UserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, name)}
}

func (_c *UserService_DeleteUser_Call) Run(run func(ctx context.Context, name string)) *UserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_DeleteUser_Call) Return(_a0 error) *UserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *UserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UserService) GetUser(ctx context.Context, id string) (User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserService_Expecter) GetUser(ctx interface{}, id interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, id string)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 User, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUser_Call) RunAndReturn(run func(context.Context, string) (User, error)) *UserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetUserByEmail(ctx context.Context, email string) (User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserService_GetUserByEmail_Call {
	return &UserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByEmail_Call) Return(_a0 User, _a1 error) *UserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (User, error)) *UserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, name
func (_m *UserService) GetUserByName(ctx context.Context, name string) (User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type UserService_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *UserService_Expecter) GetUserByName(ctx interface{}, name interface{}) *UserService_GetUserByName_Call {
	return &UserService_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, name)}
}

func (_c *UserService_GetUserByName_Call) Run(run func(ctx context.Context, name string)) *UserService_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByName_Call) Return(_a0 User, _a1 error) *UserService_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByName_Call) RunAndReturn(run func(context.Context, string) (User, error)) *UserService_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByToken provides a mock function with given fields: ctx, token
func (_m *UserService) GetUserByToken(ctx context.Context, token []byte) (User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByToken")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByToken'
type UserService_GetUserByToken_Call struct {
	*mock.Call
}

// GetUserByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token []byte
func (_e *UserService_Expecter) GetUserByToken(ctx interface{}, token interface{}) *UserService_GetUserByToken_Call {
	return &UserService_GetUserByToken_Call{Call: _e.mock.On("GetUserByToken", ctx, token)}
}

func (_c *UserService_GetUserByToken_Call) Run(run func(ctx context.Context, token []byte)) *UserService_GetUserByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *UserService_GetUserByToken_Call) Return(_a0 User, _a1 error) *UserService_GetUserByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByToken_Call) RunAndReturn(run func(context.Context, []byte) (User, error)) *UserService_GetUserByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, cursor
func (_m *UserService) GetUsers(ctx context.Context, cursor *DatabaseCursor) ([]User, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DatabaseCursor) ([]User, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DatabaseCursor) []User); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DatabaseCursor) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor *DatabaseCursor
func (_e *UserService_Expecter) GetUsers(ctx interface{}, cursor interface{}) *UserService_GetUsers_Call {
	return &UserService_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, cursor)}
}

func (_c *UserService_GetUsers_Call) Run(run func(ctx context.Context, cursor *DatabaseCursor)) *UserService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DatabaseCursor))
	})
	return _c
}

func (_c *UserService_GetUsers_Call) Return(_a0 []User, _a1 error) *UserService_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUsers_Call) RunAndReturn(run func(context.Context, *DatabaseCursor) ([]User, error)) *UserService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RotateToken provides a mock function with given fields: ctx, name
func (_m *UserService) RotateToken(ctx context.Context, name string) ([]byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_RotateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateToken'
type UserService_RotateToken_Call struct {
	*mock.Call
}

// RotateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *UserService_Expecter) RotateToken(ctx interface{}, name interface{}) *UserService_RotateToken_Call {
	return &UserService_RotateToken_Call{Call: _e.mock.On("RotateToken", ctx, name)}
}

func (_c *UserService_RotateToken_Call) Run(run func(ctx context.Context, name string)) *UserService_RotateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_RotateToken_Call) Return(_a0 []byte, _a1 error) *UserService_RotateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_RotateToken_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *UserService_RotateToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserService) UpdateUser(ctx context.Context, user UpdateUserRequest) (User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateUserRequest) (User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, UpdateUserRequest) User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, UpdateUserRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user UpdateUserRequest
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, user UpdateUserRequest)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateUserRequest))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(_a0 User, _a1 error) *UserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(context.Context, UpdateUserRequest) (User, error)) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
