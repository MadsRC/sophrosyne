// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	sophrosyne "github.com/madsrc/sophrosyne"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockUserService) CreateUser(ctx context.Context, user sophrosyne.CreateUserRequest) (sophrosyne.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateUserRequest) (sophrosyne.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateUserRequest) sophrosyne.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.CreateUserRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user sophrosyne.CreateUserRequest
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, user sophrosyne.CreateUserRequest)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.CreateUserRequest))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(context.Context, sophrosyne.CreateUserRequest) (sophrosyne.User, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, name
func (_m *MockUserService) DeleteUser(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, name interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, name)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, name string)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(_a0 error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockUserService) GetUser(ctx context.Context, id string) (sophrosyne.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserService_Expecter) GetUser(ctx interface{}, id interface{}) *MockUserService_GetUser_Call {
	return &MockUserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUserService_GetUser_Call) Run(run func(ctx context.Context, id string)) *MockUserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUser_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUser_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.User, error)) *MockUserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserService) GetUserByEmail(ctx context.Context, email string) (sophrosyne.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByName provides a mock function with given fields: ctx, name
func (_m *MockUserService) GetUserByName(ctx context.Context, name string) (sophrosyne.User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByName")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.User); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByName'
type MockUserService_GetUserByName_Call struct {
	*mock.Call
}

// GetUserByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUserService_Expecter) GetUserByName(ctx interface{}, name interface{}) *MockUserService_GetUserByName_Call {
	return &MockUserService_GetUserByName_Call{Call: _e.mock.On("GetUserByName", ctx, name)}
}

func (_c *MockUserService_GetUserByName_Call) Run(run func(ctx context.Context, name string)) *MockUserService_GetUserByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByName_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_GetUserByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByName_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.User, error)) *MockUserService_GetUserByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByToken provides a mock function with given fields: ctx, token
func (_m *MockUserService) GetUserByToken(ctx context.Context, token []byte) (sophrosyne.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByToken")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (sophrosyne.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) sophrosyne.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByToken'
type MockUserService_GetUserByToken_Call struct {
	*mock.Call
}

// GetUserByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token []byte
func (_e *MockUserService_Expecter) GetUserByToken(ctx interface{}, token interface{}) *MockUserService_GetUserByToken_Call {
	return &MockUserService_GetUserByToken_Call{Call: _e.mock.On("GetUserByToken", ctx, token)}
}

func (_c *MockUserService_GetUserByToken_Call) Run(run func(ctx context.Context, token []byte)) *MockUserService_GetUserByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockUserService_GetUserByToken_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_GetUserByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByToken_Call) RunAndReturn(run func(context.Context, []byte) (sophrosyne.User, error)) *MockUserService_GetUserByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, cursor
func (_m *MockUserService) GetUsers(ctx context.Context, cursor *sophrosyne.DatabaseCursor) ([]sophrosyne.User, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.User, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) []sophrosyne.User); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sophrosyne.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sophrosyne.DatabaseCursor) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserService_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor *sophrosyne.DatabaseCursor
func (_e *MockUserService_Expecter) GetUsers(ctx interface{}, cursor interface{}) *MockUserService_GetUsers_Call {
	return &MockUserService_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, cursor)}
}

func (_c *MockUserService_GetUsers_Call) Run(run func(ctx context.Context, cursor *sophrosyne.DatabaseCursor)) *MockUserService_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sophrosyne.DatabaseCursor))
	})
	return _c
}

func (_c *MockUserService_GetUsers_Call) Return(_a0 []sophrosyne.User, _a1 error) *MockUserService_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUsers_Call) RunAndReturn(run func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.User, error)) *MockUserService_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RotateToken provides a mock function with given fields: ctx, name
func (_m *MockUserService) RotateToken(ctx context.Context, name string) ([]byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_RotateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateToken'
type MockUserService_RotateToken_Call struct {
	*mock.Call
}

// RotateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUserService_Expecter) RotateToken(ctx interface{}, name interface{}) *MockUserService_RotateToken_Call {
	return &MockUserService_RotateToken_Call{Call: _e.mock.On("RotateToken", ctx, name)}
}

func (_c *MockUserService_RotateToken_Call) Run(run func(ctx context.Context, name string)) *MockUserService_RotateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_RotateToken_Call) Return(_a0 []byte, _a1 error) *MockUserService_RotateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_RotateToken_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockUserService_RotateToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockUserService) UpdateUser(ctx context.Context, user sophrosyne.UpdateUserRequest) (sophrosyne.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 sophrosyne.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateUserRequest) (sophrosyne.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateUserRequest) sophrosyne.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(sophrosyne.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.UpdateUserRequest) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user sophrosyne.UpdateUserRequest
func (_e *MockUserService_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(ctx context.Context, user sophrosyne.UpdateUserRequest)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.UpdateUserRequest))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 sophrosyne.User, _a1 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(context.Context, sophrosyne.UpdateUserRequest) (sophrosyne.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
