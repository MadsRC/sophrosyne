// Code generated by mockery v2.43.1. DO NOT EDIT.

package sophrosyne

import mock "github.com/stretchr/testify/mock"

// MockSpan is an autogenerated mock type for the Span type
type MockSpan struct {
	mock.Mock
}

type MockSpan_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpan) EXPECT() *MockSpan_Expecter {
	return &MockSpan_Expecter{mock: &_m.Mock}
}

// End provides a mock function with given fields:
func (_m *MockSpan) End() {
	_m.Called()
}

// MockSpan_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type MockSpan_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
func (_e *MockSpan_Expecter) End() *MockSpan_End_Call {
	return &MockSpan_End_Call{Call: _e.mock.On("End")}
}

func (_c *MockSpan_End_Call) Run(run func()) *MockSpan_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_End_Call) Return() *MockSpan_End_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_End_Call) RunAndReturn(run func()) *MockSpan_End_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpan creates a new instance of MockSpan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpan(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpan {
	mock := &MockSpan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
