// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	sophrosyne "github.com/madsrc/sophrosyne"
	mock "github.com/stretchr/testify/mock"
)

// MockCheckService is an autogenerated mock type for the CheckService type
type MockCheckService struct {
	mock.Mock
}

type MockCheckService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckService) EXPECT() *MockCheckService_Expecter {
	return &MockCheckService_Expecter{mock: &_m.Mock}
}

// CreateCheck provides a mock function with given fields: ctx, check
func (_m *MockCheckService) CreateCheck(ctx context.Context, check sophrosyne.CreateCheckRequest) (sophrosyne.Check, error) {
	ret := _m.Called(ctx, check)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheck")
	}

	var r0 sophrosyne.Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateCheckRequest) (sophrosyne.Check, error)); ok {
		return rf(ctx, check)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.CreateCheckRequest) sophrosyne.Check); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Get(0).(sophrosyne.Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.CreateCheckRequest) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckService_CreateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheck'
type MockCheckService_CreateCheck_Call struct {
	*mock.Call
}

// CreateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - check sophrosyne.CreateCheckRequest
func (_e *MockCheckService_Expecter) CreateCheck(ctx interface{}, check interface{}) *MockCheckService_CreateCheck_Call {
	return &MockCheckService_CreateCheck_Call{Call: _e.mock.On("CreateCheck", ctx, check)}
}

func (_c *MockCheckService_CreateCheck_Call) Run(run func(ctx context.Context, check sophrosyne.CreateCheckRequest)) *MockCheckService_CreateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.CreateCheckRequest))
	})
	return _c
}

func (_c *MockCheckService_CreateCheck_Call) Return(_a0 sophrosyne.Check, _a1 error) *MockCheckService_CreateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckService_CreateCheck_Call) RunAndReturn(run func(context.Context, sophrosyne.CreateCheckRequest) (sophrosyne.Check, error)) *MockCheckService_CreateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCheck provides a mock function with given fields: ctx, id
func (_m *MockCheckService) DeleteCheck(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckService_DeleteCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCheck'
type MockCheckService_DeleteCheck_Call struct {
	*mock.Call
}

// DeleteCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCheckService_Expecter) DeleteCheck(ctx interface{}, id interface{}) *MockCheckService_DeleteCheck_Call {
	return &MockCheckService_DeleteCheck_Call{Call: _e.mock.On("DeleteCheck", ctx, id)}
}

func (_c *MockCheckService_DeleteCheck_Call) Run(run func(ctx context.Context, id string)) *MockCheckService_DeleteCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCheckService_DeleteCheck_Call) Return(_a0 error) *MockCheckService_DeleteCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckService_DeleteCheck_Call) RunAndReturn(run func(context.Context, string) error) *MockCheckService_DeleteCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheck provides a mock function with given fields: ctx, id
func (_m *MockCheckService) GetCheck(ctx context.Context, id string) (sophrosyne.Check, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCheck")
	}

	var r0 sophrosyne.Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.Check, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.Check); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sophrosyne.Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckService_GetCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheck'
type MockCheckService_GetCheck_Call struct {
	*mock.Call
}

// GetCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockCheckService_Expecter) GetCheck(ctx interface{}, id interface{}) *MockCheckService_GetCheck_Call {
	return &MockCheckService_GetCheck_Call{Call: _e.mock.On("GetCheck", ctx, id)}
}

func (_c *MockCheckService_GetCheck_Call) Run(run func(ctx context.Context, id string)) *MockCheckService_GetCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCheckService_GetCheck_Call) Return(_a0 sophrosyne.Check, _a1 error) *MockCheckService_GetCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckService_GetCheck_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.Check, error)) *MockCheckService_GetCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckByName provides a mock function with given fields: ctx, name
func (_m *MockCheckService) GetCheckByName(ctx context.Context, name string) (sophrosyne.Check, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckByName")
	}

	var r0 sophrosyne.Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (sophrosyne.Check, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) sophrosyne.Check); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(sophrosyne.Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckService_GetCheckByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckByName'
type MockCheckService_GetCheckByName_Call struct {
	*mock.Call
}

// GetCheckByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockCheckService_Expecter) GetCheckByName(ctx interface{}, name interface{}) *MockCheckService_GetCheckByName_Call {
	return &MockCheckService_GetCheckByName_Call{Call: _e.mock.On("GetCheckByName", ctx, name)}
}

func (_c *MockCheckService_GetCheckByName_Call) Run(run func(ctx context.Context, name string)) *MockCheckService_GetCheckByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCheckService_GetCheckByName_Call) Return(_a0 sophrosyne.Check, _a1 error) *MockCheckService_GetCheckByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckService_GetCheckByName_Call) RunAndReturn(run func(context.Context, string) (sophrosyne.Check, error)) *MockCheckService_GetCheckByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecks provides a mock function with given fields: ctx, cursor
func (_m *MockCheckService) GetChecks(ctx context.Context, cursor *sophrosyne.DatabaseCursor) ([]sophrosyne.Check, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetChecks")
	}

	var r0 []sophrosyne.Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.Check, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sophrosyne.DatabaseCursor) []sophrosyne.Check); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sophrosyne.Check)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sophrosyne.DatabaseCursor) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckService_GetChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecks'
type MockCheckService_GetChecks_Call struct {
	*mock.Call
}

// GetChecks is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor *sophrosyne.DatabaseCursor
func (_e *MockCheckService_Expecter) GetChecks(ctx interface{}, cursor interface{}) *MockCheckService_GetChecks_Call {
	return &MockCheckService_GetChecks_Call{Call: _e.mock.On("GetChecks", ctx, cursor)}
}

func (_c *MockCheckService_GetChecks_Call) Run(run func(ctx context.Context, cursor *sophrosyne.DatabaseCursor)) *MockCheckService_GetChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sophrosyne.DatabaseCursor))
	})
	return _c
}

func (_c *MockCheckService_GetChecks_Call) Return(_a0 []sophrosyne.Check, _a1 error) *MockCheckService_GetChecks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckService_GetChecks_Call) RunAndReturn(run func(context.Context, *sophrosyne.DatabaseCursor) ([]sophrosyne.Check, error)) *MockCheckService_GetChecks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheck provides a mock function with given fields: ctx, check
func (_m *MockCheckService) UpdateCheck(ctx context.Context, check sophrosyne.UpdateCheckRequest) (sophrosyne.Check, error) {
	ret := _m.Called(ctx, check)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheck")
	}

	var r0 sophrosyne.Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateCheckRequest) (sophrosyne.Check, error)); ok {
		return rf(ctx, check)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sophrosyne.UpdateCheckRequest) sophrosyne.Check); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Get(0).(sophrosyne.Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sophrosyne.UpdateCheckRequest) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckService_UpdateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheck'
type MockCheckService_UpdateCheck_Call struct {
	*mock.Call
}

// UpdateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - check sophrosyne.UpdateCheckRequest
func (_e *MockCheckService_Expecter) UpdateCheck(ctx interface{}, check interface{}) *MockCheckService_UpdateCheck_Call {
	return &MockCheckService_UpdateCheck_Call{Call: _e.mock.On("UpdateCheck", ctx, check)}
}

func (_c *MockCheckService_UpdateCheck_Call) Run(run func(ctx context.Context, check sophrosyne.UpdateCheckRequest)) *MockCheckService_UpdateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sophrosyne.UpdateCheckRequest))
	})
	return _c
}

func (_c *MockCheckService_UpdateCheck_Call) Return(_a0 sophrosyne.Check, _a1 error) *MockCheckService_UpdateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckService_UpdateCheck_Call) RunAndReturn(run func(context.Context, sophrosyne.UpdateCheckRequest) (sophrosyne.Check, error)) *MockCheckService_UpdateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckService creates a new instance of MockCheckService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckService {
	mock := &MockCheckService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
