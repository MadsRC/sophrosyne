// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CheckService is an autogenerated mock type for the CheckService type
type CheckService struct {
	mock.Mock
}

type CheckService_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckService) EXPECT() *CheckService_Expecter {
	return &CheckService_Expecter{mock: &_m.Mock}
}

// CreateCheck provides a mock function with given fields: ctx, check
func (_m *CheckService) CreateCheck(ctx context.Context, check CreateCheckRequest) (Check, error) {
	ret := _m.Called(ctx, check)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheck")
	}

	var r0 Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateCheckRequest) (Check, error)); ok {
		return rf(ctx, check)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateCheckRequest) Check); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Get(0).(Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateCheckRequest) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService_CreateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheck'
type CheckService_CreateCheck_Call struct {
	*mock.Call
}

// CreateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - check CreateCheckRequest
func (_e *CheckService_Expecter) CreateCheck(ctx interface{}, check interface{}) *CheckService_CreateCheck_Call {
	return &CheckService_CreateCheck_Call{Call: _e.mock.On("CreateCheck", ctx, check)}
}

func (_c *CheckService_CreateCheck_Call) Run(run func(ctx context.Context, check CreateCheckRequest)) *CheckService_CreateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateCheckRequest))
	})
	return _c
}

func (_c *CheckService_CreateCheck_Call) Return(_a0 Check, _a1 error) *CheckService_CreateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckService_CreateCheck_Call) RunAndReturn(run func(context.Context, CreateCheckRequest) (Check, error)) *CheckService_CreateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCheck provides a mock function with given fields: ctx, id
func (_m *CheckService) DeleteCheck(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckService_DeleteCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCheck'
type CheckService_DeleteCheck_Call struct {
	*mock.Call
}

// DeleteCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CheckService_Expecter) DeleteCheck(ctx interface{}, id interface{}) *CheckService_DeleteCheck_Call {
	return &CheckService_DeleteCheck_Call{Call: _e.mock.On("DeleteCheck", ctx, id)}
}

func (_c *CheckService_DeleteCheck_Call) Run(run func(ctx context.Context, id string)) *CheckService_DeleteCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CheckService_DeleteCheck_Call) Return(_a0 error) *CheckService_DeleteCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CheckService_DeleteCheck_Call) RunAndReturn(run func(context.Context, string) error) *CheckService_DeleteCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheck provides a mock function with given fields: ctx, id
func (_m *CheckService) GetCheck(ctx context.Context, id string) (Check, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCheck")
	}

	var r0 Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Check, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Check); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService_GetCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheck'
type CheckService_GetCheck_Call struct {
	*mock.Call
}

// GetCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *CheckService_Expecter) GetCheck(ctx interface{}, id interface{}) *CheckService_GetCheck_Call {
	return &CheckService_GetCheck_Call{Call: _e.mock.On("GetCheck", ctx, id)}
}

func (_c *CheckService_GetCheck_Call) Run(run func(ctx context.Context, id string)) *CheckService_GetCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CheckService_GetCheck_Call) Return(_a0 Check, _a1 error) *CheckService_GetCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckService_GetCheck_Call) RunAndReturn(run func(context.Context, string) (Check, error)) *CheckService_GetCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetCheckByName provides a mock function with given fields: ctx, name
func (_m *CheckService) GetCheckByName(ctx context.Context, name string) (Check, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckByName")
	}

	var r0 Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Check, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Check); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService_GetCheckByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckByName'
type CheckService_GetCheckByName_Call struct {
	*mock.Call
}

// GetCheckByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *CheckService_Expecter) GetCheckByName(ctx interface{}, name interface{}) *CheckService_GetCheckByName_Call {
	return &CheckService_GetCheckByName_Call{Call: _e.mock.On("GetCheckByName", ctx, name)}
}

func (_c *CheckService_GetCheckByName_Call) Run(run func(ctx context.Context, name string)) *CheckService_GetCheckByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CheckService_GetCheckByName_Call) Return(_a0 Check, _a1 error) *CheckService_GetCheckByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckService_GetCheckByName_Call) RunAndReturn(run func(context.Context, string) (Check, error)) *CheckService_GetCheckByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecks provides a mock function with given fields: ctx, cursor
func (_m *CheckService) GetChecks(ctx context.Context, cursor *DatabaseCursor) ([]Check, error) {
	ret := _m.Called(ctx, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetChecks")
	}

	var r0 []Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DatabaseCursor) ([]Check, error)); ok {
		return rf(ctx, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DatabaseCursor) []Check); ok {
		r0 = rf(ctx, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Check)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DatabaseCursor) error); ok {
		r1 = rf(ctx, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService_GetChecks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecks'
type CheckService_GetChecks_Call struct {
	*mock.Call
}

// GetChecks is a helper method to define mock.On call
//   - ctx context.Context
//   - cursor *DatabaseCursor
func (_e *CheckService_Expecter) GetChecks(ctx interface{}, cursor interface{}) *CheckService_GetChecks_Call {
	return &CheckService_GetChecks_Call{Call: _e.mock.On("GetChecks", ctx, cursor)}
}

func (_c *CheckService_GetChecks_Call) Run(run func(ctx context.Context, cursor *DatabaseCursor)) *CheckService_GetChecks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DatabaseCursor))
	})
	return _c
}

func (_c *CheckService_GetChecks_Call) Return(_a0 []Check, _a1 error) *CheckService_GetChecks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckService_GetChecks_Call) RunAndReturn(run func(context.Context, *DatabaseCursor) ([]Check, error)) *CheckService_GetChecks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheck provides a mock function with given fields: ctx, check
func (_m *CheckService) UpdateCheck(ctx context.Context, check UpdateCheckRequest) (Check, error) {
	ret := _m.Called(ctx, check)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheck")
	}

	var r0 Check
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateCheckRequest) (Check, error)); ok {
		return rf(ctx, check)
	}
	if rf, ok := ret.Get(0).(func(context.Context, UpdateCheckRequest) Check); ok {
		r0 = rf(ctx, check)
	} else {
		r0 = ret.Get(0).(Check)
	}

	if rf, ok := ret.Get(1).(func(context.Context, UpdateCheckRequest) error); ok {
		r1 = rf(ctx, check)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService_UpdateCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheck'
type CheckService_UpdateCheck_Call struct {
	*mock.Call
}

// UpdateCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - check UpdateCheckRequest
func (_e *CheckService_Expecter) UpdateCheck(ctx interface{}, check interface{}) *CheckService_UpdateCheck_Call {
	return &CheckService_UpdateCheck_Call{Call: _e.mock.On("UpdateCheck", ctx, check)}
}

func (_c *CheckService_UpdateCheck_Call) Run(run func(ctx context.Context, check UpdateCheckRequest)) *CheckService_UpdateCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateCheckRequest))
	})
	return _c
}

func (_c *CheckService_UpdateCheck_Call) Return(_a0 Check, _a1 error) *CheckService_UpdateCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckService_UpdateCheck_Call) RunAndReturn(run func(context.Context, UpdateCheckRequest) (Check, error)) *CheckService_UpdateCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewCheckService creates a new instance of CheckService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCheckService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CheckService {
	mock := &CheckService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
