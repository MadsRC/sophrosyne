// Code generated by mockery v2.39.1. DO NOT EDIT.

package sophrosyne

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HealthCheckService is an autogenerated mock type for the HealthCheckService type
type HealthCheckService struct {
	mock.Mock
}

type HealthCheckService_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckService) EXPECT() *HealthCheckService_Expecter {
	return &HealthCheckService_Expecter{mock: &_m.Mock}
}

// AuthenticatedHealthcheck provides a mock function with given fields: ctx
func (_m *HealthCheckService) AuthenticatedHealthcheck(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticatedHealthcheck")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheckService_AuthenticatedHealthcheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticatedHealthcheck'
type HealthCheckService_AuthenticatedHealthcheck_Call struct {
	*mock.Call
}

// AuthenticatedHealthcheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HealthCheckService_Expecter) AuthenticatedHealthcheck(ctx interface{}) *HealthCheckService_AuthenticatedHealthcheck_Call {
	return &HealthCheckService_AuthenticatedHealthcheck_Call{Call: _e.mock.On("AuthenticatedHealthcheck", ctx)}
}

func (_c *HealthCheckService_AuthenticatedHealthcheck_Call) Run(run func(ctx context.Context)) *HealthCheckService_AuthenticatedHealthcheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HealthCheckService_AuthenticatedHealthcheck_Call) Return(_a0 []byte, _a1 error) *HealthCheckService_AuthenticatedHealthcheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HealthCheckService_AuthenticatedHealthcheck_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *HealthCheckService_AuthenticatedHealthcheck_Call {
	_c.Call.Return(run)
	return _c
}

// UnauthenticatedHealthcheck provides a mock function with given fields: ctx
func (_m *HealthCheckService) UnauthenticatedHealthcheck(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UnauthenticatedHealthcheck")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HealthCheckService_UnauthenticatedHealthcheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnauthenticatedHealthcheck'
type HealthCheckService_UnauthenticatedHealthcheck_Call struct {
	*mock.Call
}

// UnauthenticatedHealthcheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HealthCheckService_Expecter) UnauthenticatedHealthcheck(ctx interface{}) *HealthCheckService_UnauthenticatedHealthcheck_Call {
	return &HealthCheckService_UnauthenticatedHealthcheck_Call{Call: _e.mock.On("UnauthenticatedHealthcheck", ctx)}
}

func (_c *HealthCheckService_UnauthenticatedHealthcheck_Call) Run(run func(ctx context.Context)) *HealthCheckService_UnauthenticatedHealthcheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HealthCheckService_UnauthenticatedHealthcheck_Call) Return(_a0 bool) *HealthCheckService_UnauthenticatedHealthcheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealthCheckService_UnauthenticatedHealthcheck_Call) RunAndReturn(run func(context.Context) bool) *HealthCheckService_UnauthenticatedHealthcheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewHealthCheckService creates a new instance of HealthCheckService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealthCheckService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealthCheckService {
	mock := &HealthCheckService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
